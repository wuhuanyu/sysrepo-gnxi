/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gnmi.proto */

#ifndef PROTOBUF_C_gnmi_2eproto__INCLUDED
#define PROTOBUF_C_gnmi_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/any.pb-c.h"
#include "google/protobuf/descriptor.pb-c.h"
#include "gnmi_ext.pb-c.h"

typedef struct _Gnmi__Notification Gnmi__Notification;
typedef struct _Gnmi__Update Gnmi__Update;
typedef struct _Gnmi__TypedValue Gnmi__TypedValue;
typedef struct _Gnmi__Path Gnmi__Path;
typedef struct _Gnmi__PathElem Gnmi__PathElem;
typedef struct _Gnmi__PathElem__KeyEntry Gnmi__PathElem__KeyEntry;
typedef struct _Gnmi__Value Gnmi__Value;
typedef struct _Gnmi__Error Gnmi__Error;
typedef struct _Gnmi__Decimal64 Gnmi__Decimal64;
typedef struct _Gnmi__ScalarArray Gnmi__ScalarArray;
typedef struct _Gnmi__SubscribeRequest Gnmi__SubscribeRequest;
typedef struct _Gnmi__Poll Gnmi__Poll;
typedef struct _Gnmi__SubscribeResponse Gnmi__SubscribeResponse;
typedef struct _Gnmi__SubscriptionList Gnmi__SubscriptionList;
typedef struct _Gnmi__Subscription Gnmi__Subscription;
typedef struct _Gnmi__QOSMarking Gnmi__QOSMarking;
typedef struct _Gnmi__Alias Gnmi__Alias;
typedef struct _Gnmi__AliasList Gnmi__AliasList;
typedef struct _Gnmi__SetRequest Gnmi__SetRequest;
typedef struct _Gnmi__SetResponse Gnmi__SetResponse;
typedef struct _Gnmi__UpdateResult Gnmi__UpdateResult;
typedef struct _Gnmi__GetRequest Gnmi__GetRequest;
typedef struct _Gnmi__GetResponse Gnmi__GetResponse;
typedef struct _Gnmi__CapabilityRequest Gnmi__CapabilityRequest;
typedef struct _Gnmi__CapabilityResponse Gnmi__CapabilityResponse;
typedef struct _Gnmi__ModelData Gnmi__ModelData;


/* --- enums --- */

/*
 * Mode of the subscription.
 */
typedef enum _Gnmi__SubscriptionList__Mode {
  /*
   * Values streamed by the target (Sec. 3.5.1.5.2).
   */
  GNMI__SUBSCRIPTION_LIST__MODE__STREAM = 0,
  /*
   * Values sent once-off by the target (Sec. 3.5.1.5.1).
   */
  GNMI__SUBSCRIPTION_LIST__MODE__ONCE = 1,
  /*
   * Values sent in response to a poll request (Sec. 3.5.1.5.3).
   */
  GNMI__SUBSCRIPTION_LIST__MODE__POLL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI__SUBSCRIPTION_LIST__MODE)
} Gnmi__SubscriptionList__Mode;
/*
 * The operation that was associated with the Path specified.
 */
typedef enum _Gnmi__UpdateResult__Operation {
  GNMI__UPDATE_RESULT__OPERATION__INVALID = 0,
  /*
   * The result relates to a delete of Path.
   */
  GNMI__UPDATE_RESULT__OPERATION__DELETE = 1,
  /*
   * The result relates to a replace of Path.
   */
  GNMI__UPDATE_RESULT__OPERATION__REPLACE = 2,
  /*
   * The result relates to an update of Path.
   */
  GNMI__UPDATE_RESULT__OPERATION__UPDATE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI__UPDATE_RESULT__OPERATION)
} Gnmi__UpdateResult__Operation;
/*
 * Type of elements within the data tree.
 */
typedef enum _Gnmi__GetRequest__DataType {
  /*
   * All data elements.
   */
  GNMI__GET_REQUEST__DATA_TYPE__ALL = 0,
  /*
   * Config (rw) only elements.
   */
  GNMI__GET_REQUEST__DATA_TYPE__CONFIG = 1,
  /*
   * State (ro) only elements.
   */
  GNMI__GET_REQUEST__DATA_TYPE__STATE = 2,
  /*
   * Data elements marked in the schema as operational. This refers to data
   * elements whose value relates to the state of processes or interactions
   * running on the device.
   */
  GNMI__GET_REQUEST__DATA_TYPE__OPERATIONAL = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI__GET_REQUEST__DATA_TYPE)
} Gnmi__GetRequest__DataType;
/*
 * Encoding defines the value encoding formats that are supported by the gNMI
 * protocol. These encodings are used by both the client (when sending Set
 * messages to modify the state of the target) and the target when serializing
 * data to be returned to the client (in both Subscribe and Get RPCs).
 * Reference: gNMI Specification Section 2.3
 */
typedef enum _Gnmi__Encoding {
  /*
   * JSON encoded text.
   */
  GNMI__ENCODING__JSON = 0,
  /*
   * Arbitrarily encoded bytes.
   */
  GNMI__ENCODING__BYTES = 1,
  /*
   * Encoded according to out-of-band agreed Protobuf.
   */
  GNMI__ENCODING__PROTO = 2,
  /*
   * ASCII text of an out-of-band agreed format.
   */
  GNMI__ENCODING__ASCII = 3,
  /*
   * JSON encoded text as per RFC7951.
   */
  GNMI__ENCODING__JSON_IETF = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI__ENCODING)
} Gnmi__Encoding;
/*
 * SubscriptionMode is the mode of the subscription, specifying how the
 * target must return values in a subscription.
 * Reference: gNMI Specification Section 3.5.1.3
 */
typedef enum _Gnmi__SubscriptionMode {
  /*
   * The target selects the relevant mode for each element.
   */
  GNMI__SUBSCRIPTION_MODE__TARGET_DEFINED = 0,
  /*
   * The target sends an update on element value change.
   */
  GNMI__SUBSCRIPTION_MODE__ON_CHANGE = 1,
  /*
   * The target samples values according to the interval.
   */
  GNMI__SUBSCRIPTION_MODE__SAMPLE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI__SUBSCRIPTION_MODE)
} Gnmi__SubscriptionMode;

/* --- messages --- */

/*
 * Notification is a re-usable message that is used to encode data from the
 * target to the client. A Notification carries two types of changes to the data
 * tree:
 *  - Deleted values (delete) - a set of paths that have been removed from the
 *    data tree.
 *  - Updated values (update) - a set of path-value pairs indicating the path
 *    whose value has changed in the data tree.
 * Reference: gNMI Specification Section 2.1
 */
struct  _Gnmi__Notification
{
  ProtobufCMessage base;
  /*
   * Timestamp in nanoseconds since Epoch.
   */
  int64_t timestamp;
  /*
   * Prefix used for paths in the message.
   */
  Gnmi__Path *prefix;
  /*
   * An alias for the path specified in the prefix field.
   * Reference: gNMI Specification Section 2.4.2
   */
  char *alias;
  /*
   * Data elements that have changed values.
   */
  size_t n_update;
  Gnmi__Update **update;
  /*
   * Data elements that have been deleted.
   */
  size_t n_delete_;
  Gnmi__Path **delete_;
  /*
   * This notification contains a set of paths that are always updated together
   * referenced by a globally unique prefix.
   */
  protobuf_c_boolean atomic;
};
#define GNMI__NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__notification__descriptor) \
    , 0, NULL, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0 }


/*
 * Update is a re-usable message that is used to store a particular Path,
 * Value pair.
 * Reference: gNMI Specification Section 2.1
 */
struct  _Gnmi__Update
{
  ProtobufCMessage base;
  /*
   * The path (key) for the update.
   */
  Gnmi__Path *path;
  /*
   * The value (value) for the update.
   */
  Gnmi__Value *value PROTOBUF_C__DEPRECATED;
  /*
   * The explicitly typed update value.
   */
  Gnmi__TypedValue *val;
  /*
   * Number of coalesced duplicates.
   */
  uint32_t duplicates;
};
#define GNMI__UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__update__descriptor) \
    , NULL, NULL, NULL, 0 }


typedef enum {
  GNMI__TYPED_VALUE__VALUE__NOT_SET = 0,
  GNMI__TYPED_VALUE__VALUE_STRING_VAL = 1,
  GNMI__TYPED_VALUE__VALUE_INT_VAL = 2,
  GNMI__TYPED_VALUE__VALUE_UINT_VAL = 3,
  GNMI__TYPED_VALUE__VALUE_BOOL_VAL = 4,
  GNMI__TYPED_VALUE__VALUE_BYTES_VAL = 5,
  GNMI__TYPED_VALUE__VALUE_FLOAT_VAL = 6,
  GNMI__TYPED_VALUE__VALUE_DECIMAL_VAL = 7,
  GNMI__TYPED_VALUE__VALUE_LEAFLIST_VAL = 8,
  GNMI__TYPED_VALUE__VALUE_ANY_VAL = 9,
  GNMI__TYPED_VALUE__VALUE_JSON_VAL = 10,
  GNMI__TYPED_VALUE__VALUE_JSON_IETF_VAL = 11,
  GNMI__TYPED_VALUE__VALUE_ASCII_VAL = 12,
  GNMI__TYPED_VALUE__VALUE_PROTO_BYTES = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI__TYPED_VALUE__VALUE)
} Gnmi__TypedValue__ValueCase;

/*
 * TypedValue is used to encode a value being sent between the client and
 * target (originated by either entity).
 */
struct  _Gnmi__TypedValue
{
  ProtobufCMessage base;
  Gnmi__TypedValue__ValueCase value_case;
  union {
    /*
     * String value.
     */
    char *string_val;
    /*
     * Integer value.
     */
    int64_t int_val;
    /*
     * Unsigned integer value.
     */
    uint64_t uint_val;
    /*
     * Bool value.
     */
    protobuf_c_boolean bool_val;
    /*
     * Arbitrary byte sequence value.
     */
    ProtobufCBinaryData bytes_val;
    /*
     * Floating point value.
     */
    float float_val;
    /*
     * Decimal64 encoded value.
     */
    Gnmi__Decimal64 *decimal_val;
    /*
     * Mixed type scalar array value.
     */
    Gnmi__ScalarArray *leaflist_val;
    /*
     * protobuf.Any encoded bytes.
     */
    Google__Protobuf__Any *any_val;
    /*
     * JSON-encoded text.
     */
    ProtobufCBinaryData json_val;
    /*
     * JSON-encoded text per RFC7951.
     */
    ProtobufCBinaryData json_ietf_val;
    /*
     * Arbitrary ASCII text.
     */
    char *ascii_val;
    /*
     * Protobuf binary encoded bytes. The message type is not included.
     * See the specification at
     * github.com/openconfig/reference/blob/master/rpc/gnmi/protobuf-vals.md
     * for a complete specification.
     */
    ProtobufCBinaryData proto_bytes;
  };
};
#define GNMI__TYPED_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__typed_value__descriptor) \
    , GNMI__TYPED_VALUE__VALUE__NOT_SET, {0} }


/*
 * Path encodes a data tree path as a series of repeated strings, with
 * each element of the path representing a data tree node name and the
 * associated attributes.
 * Reference: gNMI Specification Section 2.2.2.
 */
struct  _Gnmi__Path
{
  ProtobufCMessage base;
  /*
   * Elements of the path are no longer encoded as a string, but rather within
   * the elem field as a PathElem message.
   */
  size_t n_element PROTOBUF_C__DEPRECATED;
  char **element PROTOBUF_C__DEPRECATED;
  /*
   * Label to disambiguate path.
   */
  char *origin;
  /*
   * Elements of the path.
   */
  size_t n_elem;
  Gnmi__PathElem **elem;
  /*
   * The name of the target
   */
  char *target;
};
#define GNMI__PATH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__path__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


struct  _Gnmi__PathElem__KeyEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define GNMI__PATH_ELEM__KEY_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__path_elem__key_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * PathElem encodes an element of a gNMI path, along ith any attributes (keys)
 * that may be associated with it.
 * Reference: gNMI Specification Section 2.2.2.
 */
struct  _Gnmi__PathElem
{
  ProtobufCMessage base;
  /*
   * The name of the element in the path.
   */
  char *name;
  /*
   * Map of key (attribute) name to value.
   */
  size_t n_key;
  Gnmi__PathElem__KeyEntry **key;
};
#define GNMI__PATH_ELEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__path_elem__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Value encodes a data tree node's value - along with the way in which
 * the value is encoded. This message is deprecated by gNMI 0.3.0.
 * Reference: gNMI Specification Section 2.2.3.
 */
struct  _Gnmi__Value
{
  ProtobufCMessage base;
  /*
   * Value of the variable being transmitted.
   */
  ProtobufCBinaryData value;
  /*
   * Encoding used for the value field.
   */
  Gnmi__Encoding type;
};
#define GNMI__VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__value__descriptor) \
    , {0,NULL}, GNMI__ENCODING__JSON }


/*
 * Error message previously utilised to return errors to the client. Deprecated
 * in favour of using the google.golang.org/genproto/googleapis/rpc/status
 * message in the RPC response.
 * Reference: gNMI Specification Section 2.5
 */
struct  _Gnmi__Error
{
  ProtobufCMessage base;
  /*
   * Canonical gRPC error code.
   */
  uint32_t code;
  /*
   * Human readable error.
   */
  char *message;
  /*
   * Optional additional information.
   */
  Google__Protobuf__Any *data;
};
#define GNMI__ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__error__descriptor) \
    , 0, (char *)protobuf_c_empty_string, NULL }


/*
 * Decimal64 is used to encode a fixed precision decimal number. The value
 * is expressed as a set of digits with the precision specifying the
 * number of digits following the decimal point in the digit set.
 */
struct  _Gnmi__Decimal64
{
  ProtobufCMessage base;
  /*
   * Set of digits.
   */
  int64_t digits;
  /*
   * Number of digits following the decimal point.
   */
  uint32_t precision;
};
#define GNMI__DECIMAL64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__decimal64__descriptor) \
    , 0, 0 }


/*
 * ScalarArray is used to encode a mixed-type array of values.
 */
struct  _Gnmi__ScalarArray
{
  ProtobufCMessage base;
  /*
   * The set of elements within the array. Each TypedValue message should
   * specify only elements that have a field identifier of 1-7 (i.e., the
   * values are scalar values).
   */
  size_t n_element;
  Gnmi__TypedValue **element;
};
#define GNMI__SCALAR_ARRAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__scalar_array__descriptor) \
    , 0,NULL }


typedef enum {
  GNMI__SUBSCRIBE_REQUEST__REQUEST__NOT_SET = 0,
  GNMI__SUBSCRIBE_REQUEST__REQUEST_SUBSCRIBE = 1,
  GNMI__SUBSCRIBE_REQUEST__REQUEST_POLL = 3,
  GNMI__SUBSCRIBE_REQUEST__REQUEST_ALIASES = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI__SUBSCRIBE_REQUEST__REQUEST)
} Gnmi__SubscribeRequest__RequestCase;

/*
 * SubscribeRequest is the message sent by the client to the target when
 * initiating a subscription to a set of paths within the data tree. The
 * request field must be populated and the initial message must specify a
 * SubscriptionList to initiate a subscription. The message is subsequently
 * used to define aliases or trigger polled data to be sent by the target.
 * Reference: gNMI Specification Section 3.5.1.1
 */
struct  _Gnmi__SubscribeRequest
{
  ProtobufCMessage base;
  /*
   * Extension messages associated with the SubscribeRequest. See the
   * gNMI extension specification for further definition.
   */
  size_t n_extension;
  GnmiExt__Extension **extension;
  Gnmi__SubscribeRequest__RequestCase request_case;
  union {
    /*
     * Specify the paths within a subscription.
     */
    Gnmi__SubscriptionList *subscribe;
    /*
     * Trigger a polled update.
     */
    Gnmi__Poll *poll;
    /*
     * Aliases to be created.
     */
    Gnmi__AliasList *aliases;
  };
};
#define GNMI__SUBSCRIBE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__subscribe_request__descriptor) \
    , 0,NULL, GNMI__SUBSCRIBE_REQUEST__REQUEST__NOT_SET, {0} }


/*
 * Poll is sent within a SubscribeRequest to trigger the device to
 * send telemetry updates for the paths that are associated with the
 * subscription.
 * Reference: gNMI Specification Section Section 3.5.1.4
 */
struct  _Gnmi__Poll
{
  ProtobufCMessage base;
};
#define GNMI__POLL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__poll__descriptor) \
     }


typedef enum {
  GNMI__SUBSCRIBE_RESPONSE__RESPONSE__NOT_SET = 0,
  GNMI__SUBSCRIBE_RESPONSE__RESPONSE_UPDATE = 1,
  GNMI__SUBSCRIBE_RESPONSE__RESPONSE_SYNC_RESPONSE = 3,
  GNMI__SUBSCRIBE_RESPONSE__RESPONSE_ERROR = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI__SUBSCRIBE_RESPONSE__RESPONSE)
} Gnmi__SubscribeResponse__ResponseCase;

/*
 * SubscribeResponse is the message used by the target within a Subscribe RPC.
 * The target includes a Notification message which is used to transmit values
 * of the path(s) that are associated with the subscription. The same message
 * is to indicate that the target has sent all data values once (is
 * synchronized).
 * Reference: gNMI Specification Section 3.5.1.4
 */
struct  _Gnmi__SubscribeResponse
{
  ProtobufCMessage base;
  /*
   * Extension messages associated with the SubscribeResponse. See the
   * gNMI extension specification for further definition.
   */
  size_t n_extension;
  GnmiExt__Extension **extension;
  Gnmi__SubscribeResponse__ResponseCase response_case;
  union {
    /*
     * Changed or sampled value for a path.
     */
    Gnmi__Notification *update;
    /*
     * Indicate target has sent all values associated with the subscription
     * at least once.
     */
    protobuf_c_boolean sync_response;
    /*
     * Deprecated in favour of google.golang.org/genproto/googleapis/rpc/status
     */
    Gnmi__Error *error PROTOBUF_C__DEPRECATED;
  };
};
#define GNMI__SUBSCRIBE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__subscribe_response__descriptor) \
    , 0,NULL, GNMI__SUBSCRIBE_RESPONSE__RESPONSE__NOT_SET, {0} }


/*
 * SubscriptionList is used within a Subscribe message to specify the list of
 * paths that the client wishes to subscribe to. The message consists of a
 * list of (possibly prefixed) paths, and options that relate to the
 * subscription.
 * Reference: gNMI Specification Section 3.5.1.2
 */
struct  _Gnmi__SubscriptionList
{
  ProtobufCMessage base;
  /*
   * Prefix used for paths.
   */
  Gnmi__Path *prefix;
  /*
   * Set of subscriptions to create.
   */
  size_t n_subscription;
  Gnmi__Subscription **subscription;
  /*
   * Whether target defined aliases are allowed within the subscription.
   */
  protobuf_c_boolean use_aliases;
  /*
   * DSCP marking to be used.
   */
  Gnmi__QOSMarking *qos;
  Gnmi__SubscriptionList__Mode mode;
  /*
   * Whether elements of the schema that are marked as eligible for aggregation
   * should be aggregated or not.
   */
  protobuf_c_boolean allow_aggregation;
  /*
   * The set of schemas that define the elements of the data tree that should
   * be sent by the target.
   */
  size_t n_use_models;
  Gnmi__ModelData **use_models;
  /*
   * The encoding that the target should use within the Notifications generated
   * corresponding to the SubscriptionList.
   */
  Gnmi__Encoding encoding;
  /*
   * An optional field to specify that only updates to current state should be
   * sent to a client. If set, the initial state is not sent to the client but
   * rather only the sync message followed by any subsequent updates to the
   * current state. For ONCE and POLL modes, this causes the server to send only
   * the sync message (Sec. 3.5.2.3).
   */
  protobuf_c_boolean updates_only;
};
#define GNMI__SUBSCRIPTION_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__subscription_list__descriptor) \
    , NULL, 0,NULL, 0, NULL, GNMI__SUBSCRIPTION_LIST__MODE__STREAM, 0, 0,NULL, GNMI__ENCODING__JSON, 0 }


/*
 * Subscription is a single request within a SubscriptionList. The path
 * specified is interpreted (along with the prefix) as the elements of the data
 * tree that the client is subscribing to. The mode determines how the target
 * should trigger updates to be sent.
 * Reference: gNMI Specification Section 3.5.1.3
 */
struct  _Gnmi__Subscription
{
  ProtobufCMessage base;
  /*
   * The data tree path.
   */
  Gnmi__Path *path;
  /*
   * Subscription mode to be used.
   */
  Gnmi__SubscriptionMode mode;
  /*
   * ns between samples in SAMPLE mode.
   */
  uint64_t sample_interval;
  /*
   * Indicates whether values that not changed should be sent in a SAMPLE
   * subscription.
   */
  protobuf_c_boolean suppress_redundant;
  /*
   * Specifies the maximum allowable silent period in nanoseconds when
   * suppress_redundant is in use. The target should send a value at least once
   * in the period specified.
   */
  uint64_t heartbeat_interval;
};
#define GNMI__SUBSCRIPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__subscription__descriptor) \
    , NULL, GNMI__SUBSCRIPTION_MODE__TARGET_DEFINED, 0, 0, 0 }


/*
 * QOSMarking specifies the DSCP value to be set on transmitted telemetry
 * updates from the target.
 * Reference: gNMI Specification Section 3.5.1.2
 */
struct  _Gnmi__QOSMarking
{
  ProtobufCMessage base;
  uint32_t marking;
};
#define GNMI__QOSMARKING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__qosmarking__descriptor) \
    , 0 }


/*
 * Alias specifies a data tree path, and an associated string which defines an
 * alias which is to be used for this path in the context of the RPC. The alias
 * is specified as a string which is prefixed with "#" to disambiguate it from
 * data tree element paths.
 * Reference: gNMI Specification Section 2.4.2
 */
struct  _Gnmi__Alias
{
  ProtobufCMessage base;
  /*
   * The path to be aliased.
   */
  Gnmi__Path *path;
  /*
   * The alias value, a string prefixed by "#".
   */
  char *alias;
};
#define GNMI__ALIAS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__alias__descriptor) \
    , NULL, (char *)protobuf_c_empty_string }


/*
 * AliasList specifies a list of aliases. It is used in a SubscribeRequest for
 * a client to create a set of aliases that the target is to utilize.
 * Reference: gNMI Specification Section 3.5.1.6
 */
struct  _Gnmi__AliasList
{
  ProtobufCMessage base;
  /*
   * The set of aliases to be created.
   */
  size_t n_alias;
  Gnmi__Alias **alias;
};
#define GNMI__ALIAS_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__alias_list__descriptor) \
    , 0,NULL }


/*
 * SetRequest is sent from a client to the target to update values in the data
 * tree. Paths are either deleted by the client, or modified by means of being
 * updated, or replaced. Where a replace is used, unspecified values are
 * considered to be replaced, whereas when update is used the changes are
 * considered to be incremental. The set of changes that are specified within
 * a single SetRequest are considered to be a transaction.
 * Reference: gNMI Specification Section 3.4.1
 */
struct  _Gnmi__SetRequest
{
  ProtobufCMessage base;
  /*
   * Prefix used for paths in the message.
   */
  Gnmi__Path *prefix;
  /*
   * Paths to be deleted from the data tree.
   */
  size_t n_delete_;
  Gnmi__Path **delete_;
  /*
   * Updates specifying elements to be replaced.
   */
  size_t n_replace;
  Gnmi__Update **replace;
  /*
   * Updates specifying elements to updated.
   */
  size_t n_update;
  Gnmi__Update **update;
  /*
   * Extension messages associated with the SetRequest. See the
   * gNMI extension specification for further definition.
   */
  size_t n_extension;
  GnmiExt__Extension **extension;
};
#define GNMI__SET_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__set_request__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * SetResponse is the response to a SetRequest, sent from the target to the
 * client. It reports the result of the modifications to the data tree that were
 * specified by the client. Errors for this RPC should be reported using the
 * https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto
 * message in the RPC return. The gnmi.Error message can be used to add additional
 * details where required.
 * Reference: gNMI Specification Section 3.4.2
 */
struct  _Gnmi__SetResponse
{
  ProtobufCMessage base;
  /*
   * Prefix used for paths.
   */
  Gnmi__Path *prefix;
  /*
   * A set of responses specifying the result of the operations specified in
   * the SetRequest.
   */
  size_t n_response;
  Gnmi__UpdateResult **response;
  /*
   * The overall status of the transaction.
   */
  Gnmi__Error *message PROTOBUF_C__DEPRECATED;
  /*
   * Timestamp of transaction (ns since epoch).
   */
  int64_t timestamp;
  /*
   * Extension messages associated with the SetResponse. See the
   * gNMI extension specification for further definition.
   */
  size_t n_extension;
  GnmiExt__Extension **extension;
};
#define GNMI__SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__set_response__descriptor) \
    , NULL, 0,NULL, NULL, 0, 0,NULL }


/*
 * UpdateResult is used within the SetResponse message to communicate the
 * result of an operation specified within a SetRequest message.
 * Reference: gNMI Specification Section 3.4.2
 */
struct  _Gnmi__UpdateResult
{
  ProtobufCMessage base;
  /*
   * Deprecated timestamp for the UpdateResult, this field has been
   * replaced by the timestamp within the SetResponse message, since
   * all mutations effected by a set should be applied as a single
   * transaction.
   */
  int64_t timestamp PROTOBUF_C__DEPRECATED;
  /*
   * Path associated with the update.
   */
  Gnmi__Path *path;
  /*
   * Status of the update operation.
   */
  Gnmi__Error *message PROTOBUF_C__DEPRECATED;
  /*
   * Update operation type.
   */
  Gnmi__UpdateResult__Operation op;
};
#define GNMI__UPDATE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__update_result__descriptor) \
    , 0, NULL, NULL, GNMI__UPDATE_RESULT__OPERATION__INVALID }


/*
 * GetRequest is sent when a client initiates a Get RPC. It is used to specify
 * the set of data elements for which the target should return a snapshot of
 * data. The use_models field specifies the set of schema modules that are to
 * be used by the target - where use_models is not specified then the target
 * must use all schema models that it has.
 * Reference: gNMI Specification Section 3.3.1
 */
struct  _Gnmi__GetRequest
{
  ProtobufCMessage base;
  /*
   * Prefix used for paths.
   */
  Gnmi__Path *prefix;
  /*
   * Paths requested by the client.
   */
  size_t n_path;
  Gnmi__Path **path;
  /*
   * The type of data being requested.
   */
  Gnmi__GetRequest__DataType type;
  /*
   * Encoding to be used.
   */
  Gnmi__Encoding encoding;
  /*
   * The schema models to be used.
   */
  size_t n_use_models;
  Gnmi__ModelData **use_models;
  /*
   * Extension messages associated with the GetRequest. See the
   * gNMI extension specification for further definition.
   */
  size_t n_extension;
  GnmiExt__Extension **extension;
};
#define GNMI__GET_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__get_request__descriptor) \
    , NULL, 0,NULL, GNMI__GET_REQUEST__DATA_TYPE__ALL, GNMI__ENCODING__JSON, 0,NULL, 0,NULL }


/*
 * GetResponse is used by the target to respond to a GetRequest from a client.
 * The set of Notifications corresponds to the data values that are requested
 * by the client in the GetRequest.
 * Reference: gNMI Specification Section 3.3.2
 */
struct  _Gnmi__GetResponse
{
  ProtobufCMessage base;
  /*
   * Data values.
   */
  size_t n_notification;
  Gnmi__Notification **notification;
  /*
   * Errors that occurred in the Get.
   */
  Gnmi__Error *error PROTOBUF_C__DEPRECATED;
  /*
   * Extension messages associated with the GetResponse. See the
   * gNMI extension specification for further definition.
   */
  size_t n_extension;
  GnmiExt__Extension **extension;
};
#define GNMI__GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__get_response__descriptor) \
    , 0,NULL, NULL, 0,NULL }


/*
 * CapabilityRequest is sent by the client in the Capabilities RPC to request
 * that the target reports its capabilities.
 * Reference: gNMI Specification Section 3.2.1
 */
struct  _Gnmi__CapabilityRequest
{
  ProtobufCMessage base;
  /*
   * Extension messages associated with the CapabilityRequest. See the
   * gNMI extension specification for further definition.
   */
  size_t n_extension;
  GnmiExt__Extension **extension;
};
#define GNMI__CAPABILITY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__capability_request__descriptor) \
    , 0,NULL }


/*
 * CapabilityResponse is used by the target to report its capabilities to the
 * client within the Capabilities RPC.
 * Reference: gNMI Specification Section 3.2.2
 */
struct  _Gnmi__CapabilityResponse
{
  ProtobufCMessage base;
  /*
   * Supported schema models.
   */
  size_t n_supported_models;
  Gnmi__ModelData **supported_models;
  /*
   * Supported encodings.
   */
  size_t n_supported_encodings;
  Gnmi__Encoding *supported_encodings;
  /*
   * Supported gNMI version.
   */
  char *gnmi_version;
  /*
   * Extension messages associated with the CapabilityResponse. See the
   * gNMI extension specification for further definition.
   */
  size_t n_extension;
  GnmiExt__Extension **extension;
};
#define GNMI__CAPABILITY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__capability_response__descriptor) \
    , 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * ModelData is used to describe a set of schema modules. It can be used in a
 * CapabilityResponse where a target reports the set of modules that it
 * supports, and within the SubscribeRequest and GetRequest messages to specify
 * the set of models from which data tree elements should be reported.
 * Reference: gNMI Specification Section 3.2.3
 */
struct  _Gnmi__ModelData
{
  ProtobufCMessage base;
  /*
   * Name of the model.
   */
  char *name;
  /*
   * Organization publishing the model.
   */
  char *organization;
  /*
   * Semantic version of the model.
   */
  char *version;
};
#define GNMI__MODEL_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi__model_data__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Gnmi__Notification methods */
void   gnmi__notification__init
                     (Gnmi__Notification         *message);
size_t gnmi__notification__get_packed_size
                     (const Gnmi__Notification   *message);
size_t gnmi__notification__pack
                     (const Gnmi__Notification   *message,
                      uint8_t             *out);
size_t gnmi__notification__pack_to_buffer
                     (const Gnmi__Notification   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Notification *
       gnmi__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__notification__free_unpacked
                     (Gnmi__Notification *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__Update methods */
void   gnmi__update__init
                     (Gnmi__Update         *message);
size_t gnmi__update__get_packed_size
                     (const Gnmi__Update   *message);
size_t gnmi__update__pack
                     (const Gnmi__Update   *message,
                      uint8_t             *out);
size_t gnmi__update__pack_to_buffer
                     (const Gnmi__Update   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Update *
       gnmi__update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__update__free_unpacked
                     (Gnmi__Update *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__TypedValue methods */
void   gnmi__typed_value__init
                     (Gnmi__TypedValue         *message);
size_t gnmi__typed_value__get_packed_size
                     (const Gnmi__TypedValue   *message);
size_t gnmi__typed_value__pack
                     (const Gnmi__TypedValue   *message,
                      uint8_t             *out);
size_t gnmi__typed_value__pack_to_buffer
                     (const Gnmi__TypedValue   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__TypedValue *
       gnmi__typed_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__typed_value__free_unpacked
                     (Gnmi__TypedValue *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__Path methods */
void   gnmi__path__init
                     (Gnmi__Path         *message);
size_t gnmi__path__get_packed_size
                     (const Gnmi__Path   *message);
size_t gnmi__path__pack
                     (const Gnmi__Path   *message,
                      uint8_t             *out);
size_t gnmi__path__pack_to_buffer
                     (const Gnmi__Path   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Path *
       gnmi__path__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__path__free_unpacked
                     (Gnmi__Path *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__PathElem__KeyEntry methods */
void   gnmi__path_elem__key_entry__init
                     (Gnmi__PathElem__KeyEntry         *message);
/* Gnmi__PathElem methods */
void   gnmi__path_elem__init
                     (Gnmi__PathElem         *message);
size_t gnmi__path_elem__get_packed_size
                     (const Gnmi__PathElem   *message);
size_t gnmi__path_elem__pack
                     (const Gnmi__PathElem   *message,
                      uint8_t             *out);
size_t gnmi__path_elem__pack_to_buffer
                     (const Gnmi__PathElem   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__PathElem *
       gnmi__path_elem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__path_elem__free_unpacked
                     (Gnmi__PathElem *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__Value methods */
void   gnmi__value__init
                     (Gnmi__Value         *message);
size_t gnmi__value__get_packed_size
                     (const Gnmi__Value   *message);
size_t gnmi__value__pack
                     (const Gnmi__Value   *message,
                      uint8_t             *out);
size_t gnmi__value__pack_to_buffer
                     (const Gnmi__Value   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Value *
       gnmi__value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__value__free_unpacked
                     (Gnmi__Value *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__Error methods */
void   gnmi__error__init
                     (Gnmi__Error         *message);
size_t gnmi__error__get_packed_size
                     (const Gnmi__Error   *message);
size_t gnmi__error__pack
                     (const Gnmi__Error   *message,
                      uint8_t             *out);
size_t gnmi__error__pack_to_buffer
                     (const Gnmi__Error   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Error *
       gnmi__error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__error__free_unpacked
                     (Gnmi__Error *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__Decimal64 methods */
void   gnmi__decimal64__init
                     (Gnmi__Decimal64         *message);
size_t gnmi__decimal64__get_packed_size
                     (const Gnmi__Decimal64   *message);
size_t gnmi__decimal64__pack
                     (const Gnmi__Decimal64   *message,
                      uint8_t             *out);
size_t gnmi__decimal64__pack_to_buffer
                     (const Gnmi__Decimal64   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Decimal64 *
       gnmi__decimal64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__decimal64__free_unpacked
                     (Gnmi__Decimal64 *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__ScalarArray methods */
void   gnmi__scalar_array__init
                     (Gnmi__ScalarArray         *message);
size_t gnmi__scalar_array__get_packed_size
                     (const Gnmi__ScalarArray   *message);
size_t gnmi__scalar_array__pack
                     (const Gnmi__ScalarArray   *message,
                      uint8_t             *out);
size_t gnmi__scalar_array__pack_to_buffer
                     (const Gnmi__ScalarArray   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__ScalarArray *
       gnmi__scalar_array__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__scalar_array__free_unpacked
                     (Gnmi__ScalarArray *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__SubscribeRequest methods */
void   gnmi__subscribe_request__init
                     (Gnmi__SubscribeRequest         *message);
size_t gnmi__subscribe_request__get_packed_size
                     (const Gnmi__SubscribeRequest   *message);
size_t gnmi__subscribe_request__pack
                     (const Gnmi__SubscribeRequest   *message,
                      uint8_t             *out);
size_t gnmi__subscribe_request__pack_to_buffer
                     (const Gnmi__SubscribeRequest   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__SubscribeRequest *
       gnmi__subscribe_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__subscribe_request__free_unpacked
                     (Gnmi__SubscribeRequest *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__Poll methods */
void   gnmi__poll__init
                     (Gnmi__Poll         *message);
size_t gnmi__poll__get_packed_size
                     (const Gnmi__Poll   *message);
size_t gnmi__poll__pack
                     (const Gnmi__Poll   *message,
                      uint8_t             *out);
size_t gnmi__poll__pack_to_buffer
                     (const Gnmi__Poll   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Poll *
       gnmi__poll__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__poll__free_unpacked
                     (Gnmi__Poll *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__SubscribeResponse methods */
void   gnmi__subscribe_response__init
                     (Gnmi__SubscribeResponse         *message);
size_t gnmi__subscribe_response__get_packed_size
                     (const Gnmi__SubscribeResponse   *message);
size_t gnmi__subscribe_response__pack
                     (const Gnmi__SubscribeResponse   *message,
                      uint8_t             *out);
size_t gnmi__subscribe_response__pack_to_buffer
                     (const Gnmi__SubscribeResponse   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__SubscribeResponse *
       gnmi__subscribe_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__subscribe_response__free_unpacked
                     (Gnmi__SubscribeResponse *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__SubscriptionList methods */
void   gnmi__subscription_list__init
                     (Gnmi__SubscriptionList         *message);
size_t gnmi__subscription_list__get_packed_size
                     (const Gnmi__SubscriptionList   *message);
size_t gnmi__subscription_list__pack
                     (const Gnmi__SubscriptionList   *message,
                      uint8_t             *out);
size_t gnmi__subscription_list__pack_to_buffer
                     (const Gnmi__SubscriptionList   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__SubscriptionList *
       gnmi__subscription_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__subscription_list__free_unpacked
                     (Gnmi__SubscriptionList *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__Subscription methods */
void   gnmi__subscription__init
                     (Gnmi__Subscription         *message);
size_t gnmi__subscription__get_packed_size
                     (const Gnmi__Subscription   *message);
size_t gnmi__subscription__pack
                     (const Gnmi__Subscription   *message,
                      uint8_t             *out);
size_t gnmi__subscription__pack_to_buffer
                     (const Gnmi__Subscription   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Subscription *
       gnmi__subscription__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__subscription__free_unpacked
                     (Gnmi__Subscription *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__QOSMarking methods */
void   gnmi__qosmarking__init
                     (Gnmi__QOSMarking         *message);
size_t gnmi__qosmarking__get_packed_size
                     (const Gnmi__QOSMarking   *message);
size_t gnmi__qosmarking__pack
                     (const Gnmi__QOSMarking   *message,
                      uint8_t             *out);
size_t gnmi__qosmarking__pack_to_buffer
                     (const Gnmi__QOSMarking   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__QOSMarking *
       gnmi__qosmarking__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__qosmarking__free_unpacked
                     (Gnmi__QOSMarking *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__Alias methods */
void   gnmi__alias__init
                     (Gnmi__Alias         *message);
size_t gnmi__alias__get_packed_size
                     (const Gnmi__Alias   *message);
size_t gnmi__alias__pack
                     (const Gnmi__Alias   *message,
                      uint8_t             *out);
size_t gnmi__alias__pack_to_buffer
                     (const Gnmi__Alias   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__Alias *
       gnmi__alias__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__alias__free_unpacked
                     (Gnmi__Alias *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__AliasList methods */
void   gnmi__alias_list__init
                     (Gnmi__AliasList         *message);
size_t gnmi__alias_list__get_packed_size
                     (const Gnmi__AliasList   *message);
size_t gnmi__alias_list__pack
                     (const Gnmi__AliasList   *message,
                      uint8_t             *out);
size_t gnmi__alias_list__pack_to_buffer
                     (const Gnmi__AliasList   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__AliasList *
       gnmi__alias_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__alias_list__free_unpacked
                     (Gnmi__AliasList *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__SetRequest methods */
void   gnmi__set_request__init
                     (Gnmi__SetRequest         *message);
size_t gnmi__set_request__get_packed_size
                     (const Gnmi__SetRequest   *message);
size_t gnmi__set_request__pack
                     (const Gnmi__SetRequest   *message,
                      uint8_t             *out);
size_t gnmi__set_request__pack_to_buffer
                     (const Gnmi__SetRequest   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__SetRequest *
       gnmi__set_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__set_request__free_unpacked
                     (Gnmi__SetRequest *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__SetResponse methods */
void   gnmi__set_response__init
                     (Gnmi__SetResponse         *message);
size_t gnmi__set_response__get_packed_size
                     (const Gnmi__SetResponse   *message);
size_t gnmi__set_response__pack
                     (const Gnmi__SetResponse   *message,
                      uint8_t             *out);
size_t gnmi__set_response__pack_to_buffer
                     (const Gnmi__SetResponse   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__SetResponse *
       gnmi__set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__set_response__free_unpacked
                     (Gnmi__SetResponse *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__UpdateResult methods */
void   gnmi__update_result__init
                     (Gnmi__UpdateResult         *message);
size_t gnmi__update_result__get_packed_size
                     (const Gnmi__UpdateResult   *message);
size_t gnmi__update_result__pack
                     (const Gnmi__UpdateResult   *message,
                      uint8_t             *out);
size_t gnmi__update_result__pack_to_buffer
                     (const Gnmi__UpdateResult   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__UpdateResult *
       gnmi__update_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__update_result__free_unpacked
                     (Gnmi__UpdateResult *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__GetRequest methods */
void   gnmi__get_request__init
                     (Gnmi__GetRequest         *message);
size_t gnmi__get_request__get_packed_size
                     (const Gnmi__GetRequest   *message);
size_t gnmi__get_request__pack
                     (const Gnmi__GetRequest   *message,
                      uint8_t             *out);
size_t gnmi__get_request__pack_to_buffer
                     (const Gnmi__GetRequest   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__GetRequest *
       gnmi__get_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__get_request__free_unpacked
                     (Gnmi__GetRequest *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__GetResponse methods */
void   gnmi__get_response__init
                     (Gnmi__GetResponse         *message);
size_t gnmi__get_response__get_packed_size
                     (const Gnmi__GetResponse   *message);
size_t gnmi__get_response__pack
                     (const Gnmi__GetResponse   *message,
                      uint8_t             *out);
size_t gnmi__get_response__pack_to_buffer
                     (const Gnmi__GetResponse   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__GetResponse *
       gnmi__get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__get_response__free_unpacked
                     (Gnmi__GetResponse *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__CapabilityRequest methods */
void   gnmi__capability_request__init
                     (Gnmi__CapabilityRequest         *message);
size_t gnmi__capability_request__get_packed_size
                     (const Gnmi__CapabilityRequest   *message);
size_t gnmi__capability_request__pack
                     (const Gnmi__CapabilityRequest   *message,
                      uint8_t             *out);
size_t gnmi__capability_request__pack_to_buffer
                     (const Gnmi__CapabilityRequest   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__CapabilityRequest *
       gnmi__capability_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__capability_request__free_unpacked
                     (Gnmi__CapabilityRequest *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__CapabilityResponse methods */
void   gnmi__capability_response__init
                     (Gnmi__CapabilityResponse         *message);
size_t gnmi__capability_response__get_packed_size
                     (const Gnmi__CapabilityResponse   *message);
size_t gnmi__capability_response__pack
                     (const Gnmi__CapabilityResponse   *message,
                      uint8_t             *out);
size_t gnmi__capability_response__pack_to_buffer
                     (const Gnmi__CapabilityResponse   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__CapabilityResponse *
       gnmi__capability_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__capability_response__free_unpacked
                     (Gnmi__CapabilityResponse *message,
                      ProtobufCAllocator *allocator);
/* Gnmi__ModelData methods */
void   gnmi__model_data__init
                     (Gnmi__ModelData         *message);
size_t gnmi__model_data__get_packed_size
                     (const Gnmi__ModelData   *message);
size_t gnmi__model_data__pack
                     (const Gnmi__ModelData   *message,
                      uint8_t             *out);
size_t gnmi__model_data__pack_to_buffer
                     (const Gnmi__ModelData   *message,
                      ProtobufCBuffer     *buffer);
Gnmi__ModelData *
       gnmi__model_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi__model_data__free_unpacked
                     (Gnmi__ModelData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Gnmi__Notification_Closure)
                 (const Gnmi__Notification *message,
                  void *closure_data);
typedef void (*Gnmi__Update_Closure)
                 (const Gnmi__Update *message,
                  void *closure_data);
typedef void (*Gnmi__TypedValue_Closure)
                 (const Gnmi__TypedValue *message,
                  void *closure_data);
typedef void (*Gnmi__Path_Closure)
                 (const Gnmi__Path *message,
                  void *closure_data);
typedef void (*Gnmi__PathElem__KeyEntry_Closure)
                 (const Gnmi__PathElem__KeyEntry *message,
                  void *closure_data);
typedef void (*Gnmi__PathElem_Closure)
                 (const Gnmi__PathElem *message,
                  void *closure_data);
typedef void (*Gnmi__Value_Closure)
                 (const Gnmi__Value *message,
                  void *closure_data);
typedef void (*Gnmi__Error_Closure)
                 (const Gnmi__Error *message,
                  void *closure_data);
typedef void (*Gnmi__Decimal64_Closure)
                 (const Gnmi__Decimal64 *message,
                  void *closure_data);
typedef void (*Gnmi__ScalarArray_Closure)
                 (const Gnmi__ScalarArray *message,
                  void *closure_data);
typedef void (*Gnmi__SubscribeRequest_Closure)
                 (const Gnmi__SubscribeRequest *message,
                  void *closure_data);
typedef void (*Gnmi__Poll_Closure)
                 (const Gnmi__Poll *message,
                  void *closure_data);
typedef void (*Gnmi__SubscribeResponse_Closure)
                 (const Gnmi__SubscribeResponse *message,
                  void *closure_data);
typedef void (*Gnmi__SubscriptionList_Closure)
                 (const Gnmi__SubscriptionList *message,
                  void *closure_data);
typedef void (*Gnmi__Subscription_Closure)
                 (const Gnmi__Subscription *message,
                  void *closure_data);
typedef void (*Gnmi__QOSMarking_Closure)
                 (const Gnmi__QOSMarking *message,
                  void *closure_data);
typedef void (*Gnmi__Alias_Closure)
                 (const Gnmi__Alias *message,
                  void *closure_data);
typedef void (*Gnmi__AliasList_Closure)
                 (const Gnmi__AliasList *message,
                  void *closure_data);
typedef void (*Gnmi__SetRequest_Closure)
                 (const Gnmi__SetRequest *message,
                  void *closure_data);
typedef void (*Gnmi__SetResponse_Closure)
                 (const Gnmi__SetResponse *message,
                  void *closure_data);
typedef void (*Gnmi__UpdateResult_Closure)
                 (const Gnmi__UpdateResult *message,
                  void *closure_data);
typedef void (*Gnmi__GetRequest_Closure)
                 (const Gnmi__GetRequest *message,
                  void *closure_data);
typedef void (*Gnmi__GetResponse_Closure)
                 (const Gnmi__GetResponse *message,
                  void *closure_data);
typedef void (*Gnmi__CapabilityRequest_Closure)
                 (const Gnmi__CapabilityRequest *message,
                  void *closure_data);
typedef void (*Gnmi__CapabilityResponse_Closure)
                 (const Gnmi__CapabilityResponse *message,
                  void *closure_data);
typedef void (*Gnmi__ModelData_Closure)
                 (const Gnmi__ModelData *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Gnmi__GNMI_Service Gnmi__GNMI_Service;
struct _Gnmi__GNMI_Service
{
  ProtobufCService base;
  void (*capabilities)(Gnmi__GNMI_Service *service,
                       const Gnmi__CapabilityRequest *input,
                       Gnmi__CapabilityResponse_Closure closure,
                       void *closure_data);
  void (*get)(Gnmi__GNMI_Service *service,
              const Gnmi__GetRequest *input,
              Gnmi__GetResponse_Closure closure,
              void *closure_data);
  void (*set)(Gnmi__GNMI_Service *service,
              const Gnmi__SetRequest *input,
              Gnmi__SetResponse_Closure closure,
              void *closure_data);
  void (*subscribe)(Gnmi__GNMI_Service *service,
                    const Gnmi__SubscribeRequest *input,
                    Gnmi__SubscribeResponse_Closure closure,
                    void *closure_data);
};
typedef void (*Gnmi__GNMI_ServiceDestroy)(Gnmi__GNMI_Service *);
void gnmi__g_nmi__init (Gnmi__GNMI_Service *service,
                        Gnmi__GNMI_ServiceDestroy destroy);
#define GNMI__G_NMI__BASE_INIT \
    { &gnmi__g_nmi__descriptor, protobuf_c_service_invoke_internal, NULL }
#define GNMI__G_NMI__INIT(function_prefix__) \
    { GNMI__G_NMI__BASE_INIT,\
      function_prefix__ ## capabilities,\
      function_prefix__ ## get,\
      function_prefix__ ## set,\
      function_prefix__ ## subscribe  }
void gnmi__g_nmi__capabilities(ProtobufCService *service,
                               const Gnmi__CapabilityRequest *input,
                               Gnmi__CapabilityResponse_Closure closure,
                               void *closure_data);
void gnmi__g_nmi__get(ProtobufCService *service,
                      const Gnmi__GetRequest *input,
                      Gnmi__GetResponse_Closure closure,
                      void *closure_data);
void gnmi__g_nmi__set(ProtobufCService *service,
                      const Gnmi__SetRequest *input,
                      Gnmi__SetResponse_Closure closure,
                      void *closure_data);
void gnmi__g_nmi__subscribe(ProtobufCService *service,
                            const Gnmi__SubscribeRequest *input,
                            Gnmi__SubscribeResponse_Closure closure,
                            void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    gnmi__encoding__descriptor;
extern const ProtobufCEnumDescriptor    gnmi__subscription_mode__descriptor;
extern const ProtobufCMessageDescriptor gnmi__notification__descriptor;
extern const ProtobufCMessageDescriptor gnmi__update__descriptor;
extern const ProtobufCMessageDescriptor gnmi__typed_value__descriptor;
extern const ProtobufCMessageDescriptor gnmi__path__descriptor;
extern const ProtobufCMessageDescriptor gnmi__path_elem__descriptor;
extern const ProtobufCMessageDescriptor gnmi__path_elem__key_entry__descriptor;
extern const ProtobufCMessageDescriptor gnmi__value__descriptor;
extern const ProtobufCMessageDescriptor gnmi__error__descriptor;
extern const ProtobufCMessageDescriptor gnmi__decimal64__descriptor;
extern const ProtobufCMessageDescriptor gnmi__scalar_array__descriptor;
extern const ProtobufCMessageDescriptor gnmi__subscribe_request__descriptor;
extern const ProtobufCMessageDescriptor gnmi__poll__descriptor;
extern const ProtobufCMessageDescriptor gnmi__subscribe_response__descriptor;
extern const ProtobufCMessageDescriptor gnmi__subscription_list__descriptor;
extern const ProtobufCEnumDescriptor    gnmi__subscription_list__mode__descriptor;
extern const ProtobufCMessageDescriptor gnmi__subscription__descriptor;
extern const ProtobufCMessageDescriptor gnmi__qosmarking__descriptor;
extern const ProtobufCMessageDescriptor gnmi__alias__descriptor;
extern const ProtobufCMessageDescriptor gnmi__alias_list__descriptor;
extern const ProtobufCMessageDescriptor gnmi__set_request__descriptor;
extern const ProtobufCMessageDescriptor gnmi__set_response__descriptor;
extern const ProtobufCMessageDescriptor gnmi__update_result__descriptor;
extern const ProtobufCEnumDescriptor    gnmi__update_result__operation__descriptor;
extern const ProtobufCMessageDescriptor gnmi__get_request__descriptor;
extern const ProtobufCEnumDescriptor    gnmi__get_request__data_type__descriptor;
extern const ProtobufCMessageDescriptor gnmi__get_response__descriptor;
extern const ProtobufCMessageDescriptor gnmi__capability_request__descriptor;
extern const ProtobufCMessageDescriptor gnmi__capability_response__descriptor;
extern const ProtobufCMessageDescriptor gnmi__model_data__descriptor;
extern const ProtobufCServiceDescriptor gnmi__g_nmi__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gnmi_2eproto__INCLUDED */
