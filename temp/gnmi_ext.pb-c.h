/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gnmi_ext.proto */

#ifndef PROTOBUF_C_gnmi_5fext_2eproto__INCLUDED
#define PROTOBUF_C_gnmi_5fext_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _GnmiExt__Extension GnmiExt__Extension;
typedef struct _GnmiExt__RegisteredExtension GnmiExt__RegisteredExtension;
typedef struct _GnmiExt__MasterArbitration GnmiExt__MasterArbitration;
typedef struct _GnmiExt__Uint128 GnmiExt__Uint128;
typedef struct _GnmiExt__Role GnmiExt__Role;


/* --- enums --- */

/*
 * RegisteredExtension is an enumeration acting as a registry for extensions
 * defined by external sources.
 */
typedef enum _GnmiExt__ExtensionID {
  /*
   * New extensions are to be defined within this enumeration - their definition
   * MUST link to a reference describing their implementation.
   */
  GNMI_EXT__EXTENSION_ID__EID_UNSET = 0,
  /*
   * An experimental extension that may be used during prototyping of a new
   * extension.
   */
  GNMI_EXT__EXTENSION_ID__EID_EXPERIMENTAL = 999
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI_EXT__EXTENSION_ID)
} GnmiExt__ExtensionID;

/* --- messages --- */

typedef enum {
  GNMI_EXT__EXTENSION__EXT__NOT_SET = 0,
  GNMI_EXT__EXTENSION__EXT_REGISTERED_EXT = 1,
  GNMI_EXT__EXTENSION__EXT_MASTER_ARBITRATION = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GNMI_EXT__EXTENSION__EXT)
} GnmiExt__Extension__ExtCase;

/*
 * The Extension message contains a single gNMI extension.
 */
struct  _GnmiExt__Extension
{
  ProtobufCMessage base;
  GnmiExt__Extension__ExtCase ext_case;
  union {
    /*
     * A registered extension.
     */
    GnmiExt__RegisteredExtension *registered_ext;
    /*
     * Well known extensions.
     */
    /*
     * Master arbitration extension.
     */
    GnmiExt__MasterArbitration *master_arbitration;
  };
};
#define GNMI_EXT__EXTENSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__extension__descriptor) \
    , GNMI_EXT__EXTENSION__EXT__NOT_SET, {0} }


/*
 * The RegisteredExtension message defines an extension which is defined outside
 * of this file.
 */
struct  _GnmiExt__RegisteredExtension
{
  ProtobufCMessage base;
  /*
   * The unique ID assigned to this extension.
   */
  GnmiExt__ExtensionID id;
  /*
   * The binary-marshalled protobuf extension payload.
   */
  ProtobufCBinaryData msg;
};
#define GNMI_EXT__REGISTERED_EXTENSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__registered_extension__descriptor) \
    , GNMI_EXT__EXTENSION_ID__EID_UNSET, {0,NULL} }


/*
 * MasterArbitration is used to select the master among multiple gNMI clients
 * with the same Roles. The client with the largest election_id is honored as
 * the master.
 * The document about gNMI master arbitration can be found at
 * https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-master-arbitration.md
 */
struct  _GnmiExt__MasterArbitration
{
  ProtobufCMessage base;
  GnmiExt__Role *role;
  GnmiExt__Uint128 *election_id;
};
#define GNMI_EXT__MASTER_ARBITRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__master_arbitration__descriptor) \
    , NULL, NULL }


/*
 * Representation of unsigned 128-bit integer.
 */
struct  _GnmiExt__Uint128
{
  ProtobufCMessage base;
  uint64_t high;
  uint64_t low;
};
#define GNMI_EXT__UINT128__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__uint128__descriptor) \
    , 0, 0 }


/*
 * There can be one master for each role. The role is identified by its id.
 */
struct  _GnmiExt__Role
{
  ProtobufCMessage base;
  /*
   * More fields can be added if needed, for example, to specify what paths the
   * role can read/write.
   */
  char *id;
};
#define GNMI_EXT__ROLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gnmi_ext__role__descriptor) \
    , (char *)protobuf_c_empty_string }


/* GnmiExt__Extension methods */
void   gnmi_ext__extension__init
                     (GnmiExt__Extension         *message);
size_t gnmi_ext__extension__get_packed_size
                     (const GnmiExt__Extension   *message);
size_t gnmi_ext__extension__pack
                     (const GnmiExt__Extension   *message,
                      uint8_t             *out);
size_t gnmi_ext__extension__pack_to_buffer
                     (const GnmiExt__Extension   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__Extension *
       gnmi_ext__extension__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__extension__free_unpacked
                     (GnmiExt__Extension *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__RegisteredExtension methods */
void   gnmi_ext__registered_extension__init
                     (GnmiExt__RegisteredExtension         *message);
size_t gnmi_ext__registered_extension__get_packed_size
                     (const GnmiExt__RegisteredExtension   *message);
size_t gnmi_ext__registered_extension__pack
                     (const GnmiExt__RegisteredExtension   *message,
                      uint8_t             *out);
size_t gnmi_ext__registered_extension__pack_to_buffer
                     (const GnmiExt__RegisteredExtension   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__RegisteredExtension *
       gnmi_ext__registered_extension__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__registered_extension__free_unpacked
                     (GnmiExt__RegisteredExtension *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__MasterArbitration methods */
void   gnmi_ext__master_arbitration__init
                     (GnmiExt__MasterArbitration         *message);
size_t gnmi_ext__master_arbitration__get_packed_size
                     (const GnmiExt__MasterArbitration   *message);
size_t gnmi_ext__master_arbitration__pack
                     (const GnmiExt__MasterArbitration   *message,
                      uint8_t             *out);
size_t gnmi_ext__master_arbitration__pack_to_buffer
                     (const GnmiExt__MasterArbitration   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__MasterArbitration *
       gnmi_ext__master_arbitration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__master_arbitration__free_unpacked
                     (GnmiExt__MasterArbitration *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__Uint128 methods */
void   gnmi_ext__uint128__init
                     (GnmiExt__Uint128         *message);
size_t gnmi_ext__uint128__get_packed_size
                     (const GnmiExt__Uint128   *message);
size_t gnmi_ext__uint128__pack
                     (const GnmiExt__Uint128   *message,
                      uint8_t             *out);
size_t gnmi_ext__uint128__pack_to_buffer
                     (const GnmiExt__Uint128   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__Uint128 *
       gnmi_ext__uint128__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__uint128__free_unpacked
                     (GnmiExt__Uint128 *message,
                      ProtobufCAllocator *allocator);
/* GnmiExt__Role methods */
void   gnmi_ext__role__init
                     (GnmiExt__Role         *message);
size_t gnmi_ext__role__get_packed_size
                     (const GnmiExt__Role   *message);
size_t gnmi_ext__role__pack
                     (const GnmiExt__Role   *message,
                      uint8_t             *out);
size_t gnmi_ext__role__pack_to_buffer
                     (const GnmiExt__Role   *message,
                      ProtobufCBuffer     *buffer);
GnmiExt__Role *
       gnmi_ext__role__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gnmi_ext__role__free_unpacked
                     (GnmiExt__Role *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*GnmiExt__Extension_Closure)
                 (const GnmiExt__Extension *message,
                  void *closure_data);
typedef void (*GnmiExt__RegisteredExtension_Closure)
                 (const GnmiExt__RegisteredExtension *message,
                  void *closure_data);
typedef void (*GnmiExt__MasterArbitration_Closure)
                 (const GnmiExt__MasterArbitration *message,
                  void *closure_data);
typedef void (*GnmiExt__Uint128_Closure)
                 (const GnmiExt__Uint128 *message,
                  void *closure_data);
typedef void (*GnmiExt__Role_Closure)
                 (const GnmiExt__Role *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    gnmi_ext__extension_id__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__extension__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__registered_extension__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__master_arbitration__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__uint128__descriptor;
extern const ProtobufCMessageDescriptor gnmi_ext__role__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gnmi_5fext_2eproto__INCLUDED */
