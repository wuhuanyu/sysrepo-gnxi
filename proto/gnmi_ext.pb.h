// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnmi_ext.proto

#ifndef PROTOBUF_INCLUDED_gnmi_5fext_2eproto
#define PROTOBUF_INCLUDED_gnmi_5fext_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gnmi_5fext_2eproto 

namespace protobuf_gnmi_5fext_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gnmi_5fext_2eproto
namespace gnmi_ext {
class Extension;
class ExtensionDefaultTypeInternal;
extern ExtensionDefaultTypeInternal _Extension_default_instance_;
class MasterArbitration;
class MasterArbitrationDefaultTypeInternal;
extern MasterArbitrationDefaultTypeInternal _MasterArbitration_default_instance_;
class RegisteredExtension;
class RegisteredExtensionDefaultTypeInternal;
extern RegisteredExtensionDefaultTypeInternal _RegisteredExtension_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class Uint128;
class Uint128DefaultTypeInternal;
extern Uint128DefaultTypeInternal _Uint128_default_instance_;
}  // namespace gnmi_ext
namespace google {
namespace protobuf {
template<> ::gnmi_ext::Extension* Arena::CreateMaybeMessage<::gnmi_ext::Extension>(Arena*);
template<> ::gnmi_ext::MasterArbitration* Arena::CreateMaybeMessage<::gnmi_ext::MasterArbitration>(Arena*);
template<> ::gnmi_ext::RegisteredExtension* Arena::CreateMaybeMessage<::gnmi_ext::RegisteredExtension>(Arena*);
template<> ::gnmi_ext::Role* Arena::CreateMaybeMessage<::gnmi_ext::Role>(Arena*);
template<> ::gnmi_ext::Uint128* Arena::CreateMaybeMessage<::gnmi_ext::Uint128>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gnmi_ext {

enum ExtensionID {
  EID_UNSET = 0,
  EID_EXPERIMENTAL = 999,
  ExtensionID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExtensionID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExtensionID_IsValid(int value);
const ExtensionID ExtensionID_MIN = EID_UNSET;
const ExtensionID ExtensionID_MAX = EID_EXPERIMENTAL;
const int ExtensionID_ARRAYSIZE = ExtensionID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExtensionID_descriptor();
inline const ::std::string& ExtensionID_Name(ExtensionID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExtensionID_descriptor(), value);
}
inline bool ExtensionID_Parse(
    const ::std::string& name, ExtensionID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExtensionID>(
    ExtensionID_descriptor(), name, value);
}
// ===================================================================

class Extension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.Extension) */ {
 public:
  Extension();
  virtual ~Extension();

  Extension(const Extension& from);

  inline Extension& operator=(const Extension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Extension(Extension&& from) noexcept
    : Extension() {
    *this = ::std::move(from);
  }

  inline Extension& operator=(Extension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Extension& default_instance();

  enum ExtCase {
    kRegisteredExt = 1,
    kMasterArbitration = 2,
    EXT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extension* internal_default_instance() {
    return reinterpret_cast<const Extension*>(
               &_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Extension* other);
  friend void swap(Extension& a, Extension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Extension* New() const final {
    return CreateMaybeMessage<Extension>(NULL);
  }

  Extension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Extension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Extension& from);
  void MergeFrom(const Extension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gnmi_ext.RegisteredExtension registered_ext = 1;
  bool has_registered_ext() const;
  void clear_registered_ext();
  static const int kRegisteredExtFieldNumber = 1;
  private:
  const ::gnmi_ext::RegisteredExtension& _internal_registered_ext() const;
  public:
  const ::gnmi_ext::RegisteredExtension& registered_ext() const;
  ::gnmi_ext::RegisteredExtension* release_registered_ext();
  ::gnmi_ext::RegisteredExtension* mutable_registered_ext();
  void set_allocated_registered_ext(::gnmi_ext::RegisteredExtension* registered_ext);

  // .gnmi_ext.MasterArbitration master_arbitration = 2;
  bool has_master_arbitration() const;
  void clear_master_arbitration();
  static const int kMasterArbitrationFieldNumber = 2;
  private:
  const ::gnmi_ext::MasterArbitration& _internal_master_arbitration() const;
  public:
  const ::gnmi_ext::MasterArbitration& master_arbitration() const;
  ::gnmi_ext::MasterArbitration* release_master_arbitration();
  ::gnmi_ext::MasterArbitration* mutable_master_arbitration();
  void set_allocated_master_arbitration(::gnmi_ext::MasterArbitration* master_arbitration);

  void clear_ext();
  ExtCase ext_case() const;
  // @@protoc_insertion_point(class_scope:gnmi_ext.Extension)
 private:
  void set_has_registered_ext();
  void set_has_master_arbitration();

  inline bool has_ext() const;
  inline void clear_has_ext();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ExtUnion {
    ExtUnion() {}
    ::gnmi_ext::RegisteredExtension* registered_ext_;
    ::gnmi_ext::MasterArbitration* master_arbitration_;
  } ext_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gnmi_5fext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisteredExtension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.RegisteredExtension) */ {
 public:
  RegisteredExtension();
  virtual ~RegisteredExtension();

  RegisteredExtension(const RegisteredExtension& from);

  inline RegisteredExtension& operator=(const RegisteredExtension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisteredExtension(RegisteredExtension&& from) noexcept
    : RegisteredExtension() {
    *this = ::std::move(from);
  }

  inline RegisteredExtension& operator=(RegisteredExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisteredExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredExtension* internal_default_instance() {
    return reinterpret_cast<const RegisteredExtension*>(
               &_RegisteredExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisteredExtension* other);
  friend void swap(RegisteredExtension& a, RegisteredExtension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisteredExtension* New() const final {
    return CreateMaybeMessage<RegisteredExtension>(NULL);
  }

  RegisteredExtension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredExtension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisteredExtension& from);
  void MergeFrom(const RegisteredExtension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredExtension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .gnmi_ext.ExtensionID id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::gnmi_ext::ExtensionID id() const;
  void set_id(::gnmi_ext::ExtensionID value);

  // @@protoc_insertion_point(class_scope:gnmi_ext.RegisteredExtension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnmi_5fext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MasterArbitration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.MasterArbitration) */ {
 public:
  MasterArbitration();
  virtual ~MasterArbitration();

  MasterArbitration(const MasterArbitration& from);

  inline MasterArbitration& operator=(const MasterArbitration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterArbitration(MasterArbitration&& from) noexcept
    : MasterArbitration() {
    *this = ::std::move(from);
  }

  inline MasterArbitration& operator=(MasterArbitration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterArbitration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterArbitration* internal_default_instance() {
    return reinterpret_cast<const MasterArbitration*>(
               &_MasterArbitration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MasterArbitration* other);
  friend void swap(MasterArbitration& a, MasterArbitration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterArbitration* New() const final {
    return CreateMaybeMessage<MasterArbitration>(NULL);
  }

  MasterArbitration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MasterArbitration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MasterArbitration& from);
  void MergeFrom(const MasterArbitration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterArbitration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gnmi_ext.Role role = 1;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 1;
  private:
  const ::gnmi_ext::Role& _internal_role() const;
  public:
  const ::gnmi_ext::Role& role() const;
  ::gnmi_ext::Role* release_role();
  ::gnmi_ext::Role* mutable_role();
  void set_allocated_role(::gnmi_ext::Role* role);

  // .gnmi_ext.Uint128 election_id = 2;
  bool has_election_id() const;
  void clear_election_id();
  static const int kElectionIdFieldNumber = 2;
  private:
  const ::gnmi_ext::Uint128& _internal_election_id() const;
  public:
  const ::gnmi_ext::Uint128& election_id() const;
  ::gnmi_ext::Uint128* release_election_id();
  ::gnmi_ext::Uint128* mutable_election_id();
  void set_allocated_election_id(::gnmi_ext::Uint128* election_id);

  // @@protoc_insertion_point(class_scope:gnmi_ext.MasterArbitration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gnmi_ext::Role* role_;
  ::gnmi_ext::Uint128* election_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnmi_5fext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Uint128 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.Uint128) */ {
 public:
  Uint128();
  virtual ~Uint128();

  Uint128(const Uint128& from);

  inline Uint128& operator=(const Uint128& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uint128(Uint128&& from) noexcept
    : Uint128() {
    *this = ::std::move(from);
  }

  inline Uint128& operator=(Uint128&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Uint128& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uint128* internal_default_instance() {
    return reinterpret_cast<const Uint128*>(
               &_Uint128_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Uint128* other);
  friend void swap(Uint128& a, Uint128& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uint128* New() const final {
    return CreateMaybeMessage<Uint128>(NULL);
  }

  Uint128* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uint128>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uint128& from);
  void MergeFrom(const Uint128& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint128* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 high = 1;
  void clear_high();
  static const int kHighFieldNumber = 1;
  ::google::protobuf::uint64 high() const;
  void set_high(::google::protobuf::uint64 value);

  // uint64 low = 2;
  void clear_low();
  static const int kLowFieldNumber = 2;
  ::google::protobuf::uint64 low() const;
  void set_low(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gnmi_ext.Uint128)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 high_;
  ::google::protobuf::uint64 low_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnmi_5fext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Role* other);
  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(NULL);
  }

  Role* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:gnmi_ext.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnmi_5fext_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Extension

// .gnmi_ext.RegisteredExtension registered_ext = 1;
inline bool Extension::has_registered_ext() const {
  return ext_case() == kRegisteredExt;
}
inline void Extension::set_has_registered_ext() {
  _oneof_case_[0] = kRegisteredExt;
}
inline void Extension::clear_registered_ext() {
  if (has_registered_ext()) {
    delete ext_.registered_ext_;
    clear_has_ext();
  }
}
inline const ::gnmi_ext::RegisteredExtension& Extension::_internal_registered_ext() const {
  return *ext_.registered_ext_;
}
inline ::gnmi_ext::RegisteredExtension* Extension::release_registered_ext() {
  // @@protoc_insertion_point(field_release:gnmi_ext.Extension.registered_ext)
  if (has_registered_ext()) {
    clear_has_ext();
      ::gnmi_ext::RegisteredExtension* temp = ext_.registered_ext_;
    ext_.registered_ext_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gnmi_ext::RegisteredExtension& Extension::registered_ext() const {
  // @@protoc_insertion_point(field_get:gnmi_ext.Extension.registered_ext)
  return has_registered_ext()
      ? *ext_.registered_ext_
      : *reinterpret_cast< ::gnmi_ext::RegisteredExtension*>(&::gnmi_ext::_RegisteredExtension_default_instance_);
}
inline ::gnmi_ext::RegisteredExtension* Extension::mutable_registered_ext() {
  if (!has_registered_ext()) {
    clear_ext();
    set_has_registered_ext();
    ext_.registered_ext_ = CreateMaybeMessage< ::gnmi_ext::RegisteredExtension >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gnmi_ext.Extension.registered_ext)
  return ext_.registered_ext_;
}

// .gnmi_ext.MasterArbitration master_arbitration = 2;
inline bool Extension::has_master_arbitration() const {
  return ext_case() == kMasterArbitration;
}
inline void Extension::set_has_master_arbitration() {
  _oneof_case_[0] = kMasterArbitration;
}
inline void Extension::clear_master_arbitration() {
  if (has_master_arbitration()) {
    delete ext_.master_arbitration_;
    clear_has_ext();
  }
}
inline const ::gnmi_ext::MasterArbitration& Extension::_internal_master_arbitration() const {
  return *ext_.master_arbitration_;
}
inline ::gnmi_ext::MasterArbitration* Extension::release_master_arbitration() {
  // @@protoc_insertion_point(field_release:gnmi_ext.Extension.master_arbitration)
  if (has_master_arbitration()) {
    clear_has_ext();
      ::gnmi_ext::MasterArbitration* temp = ext_.master_arbitration_;
    ext_.master_arbitration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gnmi_ext::MasterArbitration& Extension::master_arbitration() const {
  // @@protoc_insertion_point(field_get:gnmi_ext.Extension.master_arbitration)
  return has_master_arbitration()
      ? *ext_.master_arbitration_
      : *reinterpret_cast< ::gnmi_ext::MasterArbitration*>(&::gnmi_ext::_MasterArbitration_default_instance_);
}
inline ::gnmi_ext::MasterArbitration* Extension::mutable_master_arbitration() {
  if (!has_master_arbitration()) {
    clear_ext();
    set_has_master_arbitration();
    ext_.master_arbitration_ = CreateMaybeMessage< ::gnmi_ext::MasterArbitration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gnmi_ext.Extension.master_arbitration)
  return ext_.master_arbitration_;
}

inline bool Extension::has_ext() const {
  return ext_case() != EXT_NOT_SET;
}
inline void Extension::clear_has_ext() {
  _oneof_case_[0] = EXT_NOT_SET;
}
inline Extension::ExtCase Extension::ext_case() const {
  return Extension::ExtCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RegisteredExtension

// .gnmi_ext.ExtensionID id = 1;
inline void RegisteredExtension::clear_id() {
  id_ = 0;
}
inline ::gnmi_ext::ExtensionID RegisteredExtension::id() const {
  // @@protoc_insertion_point(field_get:gnmi_ext.RegisteredExtension.id)
  return static_cast< ::gnmi_ext::ExtensionID >(id_);
}
inline void RegisteredExtension::set_id(::gnmi_ext::ExtensionID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gnmi_ext.RegisteredExtension.id)
}

// bytes msg = 2;
inline void RegisteredExtension::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisteredExtension::msg() const {
  // @@protoc_insertion_point(field_get:gnmi_ext.RegisteredExtension.msg)
  return msg_.GetNoArena();
}
inline void RegisteredExtension::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gnmi_ext.RegisteredExtension.msg)
}
#if LANG_CXX11
inline void RegisteredExtension::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gnmi_ext.RegisteredExtension.msg)
}
#endif
inline void RegisteredExtension::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gnmi_ext.RegisteredExtension.msg)
}
inline void RegisteredExtension::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gnmi_ext.RegisteredExtension.msg)
}
inline ::std::string* RegisteredExtension::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gnmi_ext.RegisteredExtension.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisteredExtension::release_msg() {
  // @@protoc_insertion_point(field_release:gnmi_ext.RegisteredExtension.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisteredExtension::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.RegisteredExtension.msg)
}

// -------------------------------------------------------------------

// MasterArbitration

// .gnmi_ext.Role role = 1;
inline bool MasterArbitration::has_role() const {
  return this != internal_default_instance() && role_ != NULL;
}
inline void MasterArbitration::clear_role() {
  if (GetArenaNoVirtual() == NULL && role_ != NULL) {
    delete role_;
  }
  role_ = NULL;
}
inline const ::gnmi_ext::Role& MasterArbitration::_internal_role() const {
  return *role_;
}
inline const ::gnmi_ext::Role& MasterArbitration::role() const {
  const ::gnmi_ext::Role* p = role_;
  // @@protoc_insertion_point(field_get:gnmi_ext.MasterArbitration.role)
  return p != NULL ? *p : *reinterpret_cast<const ::gnmi_ext::Role*>(
      &::gnmi_ext::_Role_default_instance_);
}
inline ::gnmi_ext::Role* MasterArbitration::release_role() {
  // @@protoc_insertion_point(field_release:gnmi_ext.MasterArbitration.role)
  
  ::gnmi_ext::Role* temp = role_;
  role_ = NULL;
  return temp;
}
inline ::gnmi_ext::Role* MasterArbitration::mutable_role() {
  
  if (role_ == NULL) {
    auto* p = CreateMaybeMessage<::gnmi_ext::Role>(GetArenaNoVirtual());
    role_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnmi_ext.MasterArbitration.role)
  return role_;
}
inline void MasterArbitration::set_allocated_role(::gnmi_ext::Role* role) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete role_;
  }
  if (role) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      role = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.MasterArbitration.role)
}

// .gnmi_ext.Uint128 election_id = 2;
inline bool MasterArbitration::has_election_id() const {
  return this != internal_default_instance() && election_id_ != NULL;
}
inline void MasterArbitration::clear_election_id() {
  if (GetArenaNoVirtual() == NULL && election_id_ != NULL) {
    delete election_id_;
  }
  election_id_ = NULL;
}
inline const ::gnmi_ext::Uint128& MasterArbitration::_internal_election_id() const {
  return *election_id_;
}
inline const ::gnmi_ext::Uint128& MasterArbitration::election_id() const {
  const ::gnmi_ext::Uint128* p = election_id_;
  // @@protoc_insertion_point(field_get:gnmi_ext.MasterArbitration.election_id)
  return p != NULL ? *p : *reinterpret_cast<const ::gnmi_ext::Uint128*>(
      &::gnmi_ext::_Uint128_default_instance_);
}
inline ::gnmi_ext::Uint128* MasterArbitration::release_election_id() {
  // @@protoc_insertion_point(field_release:gnmi_ext.MasterArbitration.election_id)
  
  ::gnmi_ext::Uint128* temp = election_id_;
  election_id_ = NULL;
  return temp;
}
inline ::gnmi_ext::Uint128* MasterArbitration::mutable_election_id() {
  
  if (election_id_ == NULL) {
    auto* p = CreateMaybeMessage<::gnmi_ext::Uint128>(GetArenaNoVirtual());
    election_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnmi_ext.MasterArbitration.election_id)
  return election_id_;
}
inline void MasterArbitration::set_allocated_election_id(::gnmi_ext::Uint128* election_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete election_id_;
  }
  if (election_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      election_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, election_id, submessage_arena);
    }
    
  } else {
    
  }
  election_id_ = election_id;
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.MasterArbitration.election_id)
}

// -------------------------------------------------------------------

// Uint128

// uint64 high = 1;
inline void Uint128::clear_high() {
  high_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Uint128::high() const {
  // @@protoc_insertion_point(field_get:gnmi_ext.Uint128.high)
  return high_;
}
inline void Uint128::set_high(::google::protobuf::uint64 value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:gnmi_ext.Uint128.high)
}

// uint64 low = 2;
inline void Uint128::clear_low() {
  low_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Uint128::low() const {
  // @@protoc_insertion_point(field_get:gnmi_ext.Uint128.low)
  return low_;
}
inline void Uint128::set_low(::google::protobuf::uint64 value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:gnmi_ext.Uint128.low)
}

// -------------------------------------------------------------------

// Role

// string id = 1;
inline void Role::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::id() const {
  // @@protoc_insertion_point(field_get:gnmi_ext.Role.id)
  return id_.GetNoArena();
}
inline void Role::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gnmi_ext.Role.id)
}
#if LANG_CXX11
inline void Role::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gnmi_ext.Role.id)
}
#endif
inline void Role::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gnmi_ext.Role.id)
}
inline void Role::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gnmi_ext.Role.id)
}
inline ::std::string* Role::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gnmi_ext.Role.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_id() {
  // @@protoc_insertion_point(field_release:gnmi_ext.Role.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Role.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnmi_ext

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gnmi_ext::ExtensionID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gnmi_ext::ExtensionID>() {
  return ::gnmi_ext::ExtensionID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gnmi_5fext_2eproto
